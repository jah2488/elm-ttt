Elm.BoardTest = Elm.BoardTest || {};
Elm.BoardTest.make = function (_elm) {
   "use strict";
   _elm.BoardTest = _elm.BoardTest || {};
   if (_elm.BoardTest.values) return _elm.BoardTest.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Board = Elm.Board.make(_elm),
   $Common = Elm.Common.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $ElmTest = Elm.ElmTest.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $TestHelpers = Elm.TestHelpers.make(_elm);
   var _op = {};
   var movesForTest = A2($ElmTest.suite,
   "Returns a list of Indexes where the given player has moves on the board",
   _U.list([A2($ElmTest.test,"",A2($ElmTest.assertEqual,A2($Board.movesFor,_U.list([$Common.X,$Common.Empty,$Common.O,$Common.O]),$Common.Human),_U.list([0])))
           ,A2($ElmTest.test,
           "",
           A2($ElmTest.assertEqual,A2($Board.movesFor,_U.list([$Common.X,$Common.Empty,$Common.O,$Common.O]),$Common.Computer),_U.list([2,3])))
           ,A2($ElmTest.test,
           "",
           A2($ElmTest.assertEqual,A2($Board.movesFor,_U.list([$Common.X,$Common.Empty,$Common.O,$Common.O]),$Common.None),_U.list([1])))]));
   var makeMoveTest = A2($ElmTest.suite,
   "Updates a given game record\'s board with the current player in the id provided",
   _U.list([A2($ElmTest.test,
           "Empty board",
           A2($ElmTest.assertEqual,
           function (_) {
              return _.board;
           }(A2($Board.makeMove,0,$TestHelpers.newGame)),
           _U.list([$Common.X,$Common.Empty,$Common.Empty,$Common.Empty,$Common.Empty,$Common.Empty,$Common.Empty,$Common.Empty,$Common.Empty])))
           ,A2($ElmTest.test,
           "Existing board",
           A2($ElmTest.assertEqual,
           function (_) {
              return _.board;
           }(A2($Board.makeMove,1,$TestHelpers.gameWithBoard(_U.list([$Common.X,$Common.Empty,$Common.O])))),
           _U.list([$Common.X,$Common.X,$Common.O])))]));
   var placeTest = A2($ElmTest.suite,
   "Converts Player type to Cell type",
   _U.list([A2($ElmTest.test,"Human -> X",A2($ElmTest.assertEqual,$Board.place($Common.Human),$Common.X))
           ,A2($ElmTest.test,"Computer -> X",A2($ElmTest.assertEqual,$Board.place($Common.Computer),$Common.O))
           ,A2($ElmTest.test,"None -> Empty",A2($ElmTest.assertEqual,$Board.place($Common.None),$Common.Empty))]));
   var boardSuite = A2($ElmTest.suite,"Board",_U.list([A2($ElmTest.test,"Addition",A2($ElmTest.assertEqual,3 + 7,10)),placeTest,makeMoveTest,movesForTest]));
   return _elm.BoardTest.values = {_op: _op,placeTest: placeTest,makeMoveTest: makeMoveTest,movesForTest: movesForTest,boardSuite: boardSuite};
};