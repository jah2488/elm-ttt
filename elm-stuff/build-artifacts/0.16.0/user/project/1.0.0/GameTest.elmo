Elm.GameTest = Elm.GameTest || {};
Elm.GameTest.make = function (_elm) {
   "use strict";
   _elm.GameTest = _elm.GameTest || {};
   if (_elm.GameTest.values) return _elm.GameTest.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Common = Elm.Common.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $ElmTest = Elm.ElmTest.make(_elm),
   $Game = Elm.Game.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $TestHelpers = Elm.TestHelpers.make(_elm);
   var _op = {};
   var validMoveTest = A2($ElmTest.suite,
   "Ensures the selected index is a valid move given a particular game state",
   _U.list([A2($ElmTest.test,"",$ElmTest.assert(A2($Game.validMove,0,$Game.newGame)))
           ,A2($ElmTest.test,"",$ElmTest.assert(A2($Game.validMove,1,$TestHelpers.gameWithBoard(_U.list([$Common.O,$Common.Empty,$Common.O])))))
           ,A2($ElmTest.test,"",$ElmTest.assert($Basics.not(A2($Game.validMove,0,$TestHelpers.gameWithBoard(_U.list([$Common.O,$Common.X,$Common.O]))))))]));
   var checkForWinnersTest = A2($ElmTest.suite,
   "checkForWinner sets the game\'s winner if current player has won",
   _U.list([A2($ElmTest.test,"",A2($ElmTest.assertEqual,$Common.None,function (_) {    return _.winner;}($Game.checkForWinners($Game.newGame))))
           ,A2($ElmTest.test,
           "",
           A2($ElmTest.assertEqual,
           $Common.Human,
           function (_) {
              return _.winner;
           }($Game.checkForWinners($TestHelpers.gameWithBoard(_U.list([$Common.X,$Common.X,$Common.X]))))))
           ,A2($ElmTest.test,
           "",
           A2($ElmTest.assertEqual,
           $Common.None,
           function (_) {
              return _.winner;
           }($Game.checkForWinners($TestHelpers.gameWithBoard(_U.list([$Common.O,$Common.O,$Common.O]))))))]));
   var switchCurrentPlayerTest = A2($ElmTest.suite,
   "switchCurrentPlayer returns the game for the next player",
   _U.list([A2($ElmTest.test,"",A2($ElmTest.assertEqual,$Common.Computer,function (_) {    return _.turn;}($Game.switchCurrentPlayer($Game.newGame))))]));
   var switchPlayerTest = A2($ElmTest.suite,
   "switchPlayer returns the next player",
   _U.list([A2($ElmTest.test,"",A2($ElmTest.assertEqual,$Game.switchPlayer($Common.Human),$Common.Computer))
           ,A2($ElmTest.test,"",A2($ElmTest.assertEqual,$Game.switchPlayer($Common.Computer),$Common.Human))
           ,A2($ElmTest.test,"",A2($ElmTest.assertEqual,$Game.switchPlayer($Common.None),$Common.None))]));
   var gameSuite = A2($ElmTest.suite,"Game",_U.list([switchPlayerTest,switchCurrentPlayerTest,checkForWinnersTest,validMoveTest]));
   return _elm.GameTest.values = {_op: _op
                                 ,switchPlayerTest: switchPlayerTest
                                 ,switchCurrentPlayerTest: switchCurrentPlayerTest
                                 ,checkForWinnersTest: checkForWinnersTest
                                 ,validMoveTest: validMoveTest
                                 ,gameSuite: gameSuite};
};