Elm.UtilsTest = Elm.UtilsTest || {};
Elm.UtilsTest.make = function (_elm) {
   "use strict";
   _elm.UtilsTest = _elm.UtilsTest || {};
   if (_elm.UtilsTest.values) return _elm.UtilsTest.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $ElmTest = Elm.ElmTest.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var _op = {};
   var isSubsetTest = A2($ElmTest.suite,
   "isSubset",
   _U.list([A2($ElmTest.test,"",$ElmTest.assert(A2($Utils.isSubset,_U.list([1]),_U.list([1,2,3]))))
           ,A2($ElmTest.test,"",$ElmTest.assert($Basics.not(A2($Utils.isSubset,_U.list([2]),_U.list([1,3])))))
           ,A2($ElmTest.test,"",$ElmTest.assert($Basics.not(A2($Utils.isSubset,_U.list([3,3,2]),_U.list([2,3])))))
           ,A2($ElmTest.test,"",$ElmTest.assert(A2($Utils.isSubset,_U.list([3,2,2]),_U.list([2,2,3]))))]));
   var utilsSuite = A2($ElmTest.suite,"Utils",_U.list([isSubsetTest]));
   return _elm.UtilsTest.values = {_op: _op,isSubsetTest: isSubsetTest,utilsSuite: utilsSuite};
};