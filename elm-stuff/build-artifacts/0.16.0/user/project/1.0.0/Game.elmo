Elm.Game = Elm.Game || {};
Elm.Game.make = function (_elm) {
   "use strict";
   _elm.Game = _elm.Game || {};
   if (_elm.Game.values) return _elm.Game.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Board = Elm.Board.make(_elm),
   $Common = Elm.Common.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var _op = {};
   var validMove = F2(function (id,game) {    return A2($List.member,id,A2($Board.movesFor,game.board,$Common.None));});
   var checkForWinners = function (game) {
      var moves = A2($Board.movesFor,game.board,game.turn);
      var didWin = A2($List.any,function (winSet) {    return A2($Utils.isSubset,winSet,moves);},$Board.winningMoves);
      return _U.eq(didWin,true) ? _U.update(game,{winner: game.turn}) : game;
   };
   var switchPlayer = function (turn) {
      var _p0 = turn;
      switch (_p0.ctor)
      {case "Human": return $Common.Computer;
         case "Computer": return $Common.Human;
         default: return $Common.None;}
   };
   var switchCurrentPlayer = function (game) {
      var newMessage = _U.eq(game.turn,$Common.Human) ? "Computer is thinking" : _U.eq(game.turn,$Common.Computer) ? "Your Move" : "...";
      return _U.update(game,{turn: switchPlayer(game.turn),message: newMessage});
   };
   var newGame = {turn: $Common.Human
                 ,board: _U.list([$Common.Empty
                                 ,$Common.Empty
                                 ,$Common.Empty
                                 ,$Common.Empty
                                 ,$Common.Empty
                                 ,$Common.Empty
                                 ,$Common.Empty
                                 ,$Common.Empty
                                 ,$Common.Empty])
                 ,winner: $Common.None
                 ,state: $Common.Playing
                 ,message: "Pick your starting move"};
   return _elm.Game.values = {_op: _op
                             ,newGame: newGame
                             ,switchPlayer: switchPlayer
                             ,switchCurrentPlayer: switchCurrentPlayer
                             ,checkForWinners: checkForWinners
                             ,validMove: validMove};
};