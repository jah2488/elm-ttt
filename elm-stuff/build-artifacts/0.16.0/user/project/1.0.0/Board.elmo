Elm.Board = Elm.Board || {};
Elm.Board.make = function (_elm) {
   "use strict";
   _elm.Board = _elm.Board || {};
   if (_elm.Board.values) return _elm.Board.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Common = Elm.Common.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var cellPlayer = function (cell) {
      var _p0 = cell;
      switch (_p0.ctor)
      {case "X": return $Common.Human;
         case "O": return $Common.Computer;
         default: return $Common.None;}
   };
   var place = function (player) {
      var _p1 = player;
      switch (_p1.ctor)
      {case "Human": return $Common.X;
         case "Computer": return $Common.O;
         default: return $Common.Empty;}
   };
   var updateBoard = F3(function (id,player,board) {
      return A2($List.indexedMap,F2(function (idx,cell) {    return _U.eq(id,idx) ? place(player) : cell;}),board);
   });
   var makeMove = F2(function (id,game) {    return _U.update(game,{board: A3(updateBoard,id,game.turn,game.board)});});
   var movesFor = F2(function (board,player) {
      var playerPiece = place(player);
      var isPlayer = function (_p2) {    var _p3 = _p2;return _U.eq(playerPiece,_p3._1) ? $Maybe.Just(_p3._0) : $Maybe.Nothing;};
      return A2($List.filterMap,isPlayer,A2($List.indexedMap,F2(function (v0,v1) {    return {ctor: "_Tuple2",_0: v0,_1: v1};}),board));
   });
   var winningMoves = _U.list([_U.list([0,1,2])
                              ,_U.list([3,4,5])
                              ,_U.list([6,7,8])
                              ,_U.list([0,3,6])
                              ,_U.list([1,4,7])
                              ,_U.list([2,5,8])
                              ,_U.list([0,4,8])
                              ,_U.list([6,4,2])]);
   return _elm.Board.values = {_op: _op
                              ,winningMoves: winningMoves
                              ,place: place
                              ,cellPlayer: cellPlayer
                              ,updateBoard: updateBoard
                              ,makeMove: makeMove
                              ,movesFor: movesFor};
};